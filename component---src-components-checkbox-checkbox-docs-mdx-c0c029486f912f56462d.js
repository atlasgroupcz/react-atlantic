(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{dZce:function(e,o,t){"use strict";t.r(o),t.d(o,"Checkbox",(function(){return s})),t.d(o,"_frontmatter",(function(){return k})),t.d(o,"default",(function(){return d}));var a=t("Fcif"),c=t("+I+c"),b=(t("mXGw"),t("/FXl")),i=t("TjRS"),n=t("ZFoC"),r=t("Nquo"),h=t("DbHl"),p=t("cVUh"),l=(t("aD51"),["components"]),s=Object(p.wrap)(r.a,r.b);void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"Checkbox",filename:"src/components/Checkbox/Checkbox.docs.mdx"}});var k={};void 0!==k&&k&&k===Object(k)&&Object.isExtensible(k)&&!k.hasOwnProperty("__filemeta")&&Object.defineProperty(k,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/Checkbox/Checkbox.docs.mdx"}});var C={Checkbox:s,_frontmatter:k},x=i.a;function d(e){var o,t,d,u,m,O=e.components,j=Object(c.a)(e,l);return Object(b.b)(x,Object(a.a)({},C,j,{components:O,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"checkbox"},"Checkbox"),Object(b.b)("p",null,"Better looking alternative to native HTML checkbox"),Object(b.b)("h2",{id:"basic-usage"},"Basic usage"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-tsx"},"import { Checkbox as CheckboxView, useCheckbox } from '@atlasgroup/react-atlantic';\n\nconst Checkbox = wrap(CheckboxView, useCheckbox);\n")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},Object(b.b)("inlineCode",{parentName:"p"},"Checkbox")," must be wrapped with ",Object(b.b)("inlineCode",{parentName:"p"},"useCheckbox")," to make the element interactive. But be aware ",Object(b.b)("inlineCode",{parentName:"p"},"useCheckbox")," hook provides basic checkbox logic only such as handling ",Object(b.b)("inlineCode",{parentName:"p"},"isChecked")," prop, for more info see ",Object(b.b)("a",{parentName:"p",href:"#known-bugs"},"known bugs section"))),Object(b.b)(n.b,{__position:0,__code:"<Checkbox>Check ME</Checkbox>",__scope:(o={props:j,DefaultLayout:i.a,Playground:n.b,CheckboxView:r.a,useCheckbox:r.b,WrapperHorizontal:h.a,wrap:p.wrap},o.DefaultLayout=i.a,o.Checkbox=s,o._frontmatter=k,o),mdxType:"Playground"},Object(b.b)(s,{mdxType:"Checkbox"},"Check ME")),Object(b.b)("h2",{id:"sizes"},"Sizes"),Object(b.b)(n.b,{__position:1,__code:'<CheckboxView size="small">Check ME</CheckboxView>\n<CheckboxView size="medium">Check ME</CheckboxView>\n<CheckboxView size="large">Check ME</CheckboxView>',__scope:(t={props:j,DefaultLayout:i.a,Playground:n.b,CheckboxView:r.a,useCheckbox:r.b,WrapperHorizontal:h.a,wrap:p.wrap},t.DefaultLayout=i.a,t.Checkbox=s,t._frontmatter=k,t),mdxType:"Playground"},Object(b.b)(r.a,{size:"small",mdxType:"CheckboxView"},"Check ME"),Object(b.b)(r.a,{size:"medium",mdxType:"CheckboxView"},"Check ME"),Object(b.b)(r.a,{size:"large",mdxType:"CheckboxView"},"Check ME")),Object(b.b)("h2",{id:"other-props"},"Other props"),Object(b.b)(n.b,{__position:2,__code:"<Checkbox isDefaultChecked>Check ME</Checkbox>\n<Checkbox isDisabled>Check ME</Checkbox>",__scope:(d={props:j,DefaultLayout:i.a,Playground:n.b,CheckboxView:r.a,useCheckbox:r.b,WrapperHorizontal:h.a,wrap:p.wrap},d.DefaultLayout=i.a,d.Checkbox=s,d._frontmatter=k,d),mdxType:"Playground"},Object(b.b)(s,{isDefaultChecked:!0,mdxType:"Checkbox"},"Check ME"),Object(b.b)(s,{isDisabled:!0,mdxType:"Checkbox"},"Check ME")),Object(b.b)("h2",{id:"text-positions"},"Text positions"),Object(b.b)(n.b,{__position:3,__code:'<WrapperHorizontal>\n  <CheckboxView horizontalPosition="left">Check ME</CheckboxView>\n  <CheckboxView horizontalPosition="right">Check ME</CheckboxView>\n</WrapperHorizontal>',__scope:(u={props:j,DefaultLayout:i.a,Playground:n.b,CheckboxView:r.a,useCheckbox:r.b,WrapperHorizontal:h.a,wrap:p.wrap},u.DefaultLayout=i.a,u.Checkbox=s,u._frontmatter=k,u),mdxType:"Playground"},Object(b.b)(h.a,{mdxType:"WrapperHorizontal"},Object(b.b)(r.a,{horizontalPosition:"left",mdxType:"CheckboxView"},"Check ME"),Object(b.b)(r.a,{horizontalPosition:"right",mdxType:"CheckboxView"},"Check ME"))),Object(b.b)("h2",{id:"known-bugs"},"Known bugs"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"useCheckbox")," hook does not handle correctly ",Object(b.b)("inlineCode",{parentName:"li"},"isPartiallyChecked")," prop"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"useCheckbox")," hook does not pass props (e.g. ",Object(b.b)("inlineCode",{parentName:"li"},"size"),", ",Object(b.b)("inlineCode",{parentName:"li"},"horizontalPosition"),", ...)"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"CheckboxView")," can not have ",Object(b.b)("inlineCode",{parentName:"li"},"isPartiallyChecked")," and ",Object(b.b)("inlineCode",{parentName:"li"},"isChecked")," prop at the same time")),Object(b.b)(n.b,{__position:4,__code:"<Checkbox isPartiallyChecked>Check ME</Checkbox>\n<CheckboxView isPartiallyChecked isChecked>\n  Check ME\n</CheckboxView>",__scope:(m={props:j,DefaultLayout:i.a,Playground:n.b,CheckboxView:r.a,useCheckbox:r.b,WrapperHorizontal:h.a,wrap:p.wrap},m.DefaultLayout=i.a,m.Checkbox=s,m._frontmatter=k,m),mdxType:"Playground"},Object(b.b)(s,{isPartiallyChecked:!0,mdxType:"Checkbox"},"Check ME"),Object(b.b)(r.a,{isPartiallyChecked:!0,isChecked:!0,mdxType:"CheckboxView"},"Check ME")))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/Checkbox/Checkbox.docs.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-checkbox-checkbox-docs-mdx-c0c029486f912f56462d.js.map