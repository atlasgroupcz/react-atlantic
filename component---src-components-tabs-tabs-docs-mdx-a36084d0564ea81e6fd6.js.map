{"version":3,"sources":["webpack:///../src/components/Tabs/Tabs.docs.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Tabs","Text","Title","useState","WrapperHorizontal","activeTab","setActiveTab","activeKey","onClick","event","key","List","map","element","e","level","isMDXComponent"],"mappings":"uUAaaA,EAAe,Q,mNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,QADR,QAGA,0FACA,kBACE,GAAM,eADR,eAGA,8BACE,iBAAGC,WAAW,cAAd,eAA2C,0BAAYA,WAAW,KAAvB,QAA3C,6GAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,2qBAAorBC,SAAO,GAC5tBL,QACAH,kBACAS,eACAC,YACAC,YACAC,cACAC,oBACAC,uBAR4tB,gBAS5tBd,IAT4tB,EAU5tBH,eAV4tB,GAW3tBO,QAAQ,eACV,WACG,IACA,EAAkCS,mBADd,KACbE,EAAP,KAAkBC,EAAlB,KAYA,OAAO,YAAC,OAAD,CAAMC,UAAWF,EAAWG,QAVnB,SAACC,EAAOC,GAAR,OAAgBJ,EAAaI,IAUQC,KARxC,SAAC,GAAD,IACXH,EADW,EACXA,QADW,OAEP,YAAC,IAAD,CAAmBd,QAAQ,qBACxB,CAAC,EAAG,EAAG,GAAGkB,KAAI,SAAAF,GAAG,OAAI,YAAC,OAAD,CAAMG,QAAQ,SAASH,IAAKA,EAAKF,QAAS,SAAAM,GAAC,OAAIN,EAAQM,EAAD,GAAOJ,IAAQhB,QAAQ,QAA7E,OACNgB,QAIyChB,QAAQ,QACjE,YAAC,QAAD,CAAOqB,MAAO,EAAGL,IAAI,IAAIhB,QAAQ,SAAjC,mBACA,YAAC,QAAD,CAAOqB,MAAO,EAAGL,IAAI,IAAIhB,QAAQ,SAAjC,mBACA,YAAC,QAAD,CAAOqB,MAAO,EAAGL,IAAI,IAAIhB,QAAQ,SAAjC,uBAIZ,kBACE,GAAM,SADR,SAGA,yFAAwE,0BAAYC,WAAW,KAAvB,aAAxE,KAAmI,0BAAYA,WAAW,KAAvB,WAAnI,KAA4L,0BAAYA,WAAW,KAAvB,QAA5L,QAAqP,0BAAYA,WAAW,KAAvB,YAArP,KACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,aAApB,8EACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,4DACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,QAApB,sEACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,YAApB,yBAA2F,0BAAYA,WAAW,MAAvB,QAA3F,uD,iNAMNJ,EAAWyB,gBAAiB","file":"component---src-components-tabs-tabs-docs-mdx-a36084d0564ea81e6fd6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/filipkastovsky/work/atlas-consulting/react-atlantic/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Tabs } from '.';\nimport { Text, Title } from '../Typography';\nimport { useState } from 'react';\nimport { WrapperHorizontal } from '../../gatsby-theme-docz/components/Wrapper';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"tabs\"\n    }}>{`Tabs`}</h1>\n    <p>{`Is a component that allows you to switch between different views.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Children of `}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` must have a key that corresponds with key of the tab in list, otherwise children order (index) is used.`}</p>\n    </blockquote>\n    <Playground __position={0} __code={'() => {\\n  const DEFAULT_TAB = \\'1\\'\\n  const [activeTab, setActiveTab] = useState(DEFAULT_TAB)\\n  const onClick = (event, key) => setActiveTab(key)\\n  const List = ({ onClick }) => (\\n    <WrapperHorizontal>\\n      {[0, 1, 2].map(key => (\\n        <Text element=\\\"strong\\\" key={key} onClick={e => onClick(e, `${key}`)}>\\n          {`Tab ${key}`}\\n        </Text>\\n      ))}\\n    </WrapperHorizontal>\\n  )\\n  return (\\n    <Tabs activeKey={activeTab} onClick={onClick} List={List}>\\n      <Title level={5} key=\\\"0\\\">{`Tab content 0️⃣`}</Title>\\n      <Title level={5} key=\\\"1\\\">{`Tab content 1️⃣`}</Title>\\n      <Title level={5} key=\\\"2\\\">{`Tab content 2️⃣`}</Title>\\n    </Tabs>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Tabs,\n      Text,\n      Title,\n      useState,\n      WrapperHorizontal,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    {() => {\n        const DEFAULT_TAB = '1';\n        const [activeTab, setActiveTab] = useState(DEFAULT_TAB);\n\n        const onClick = (event, key) => setActiveTab(key);\n\n        const List = ({\n          onClick\n        }) => <WrapperHorizontal mdxType=\"WrapperHorizontal\">\n                {[0, 1, 2].map(key => <Text element=\"strong\" key={key} onClick={e => onClick(e, `${key}`)} mdxType=\"Text\">\n                        {`Tab ${key}`}\n                    </Text>)}\n            </WrapperHorizontal>;\n\n        return <Tabs activeKey={activeTab} onClick={onClick} List={List} mdxType=\"Tabs\">\n                <Title level={5} key=\"0\" mdxType=\"Title\">{`Tab content 0️⃣`}</Title>\n                <Title level={5} key=\"1\" mdxType=\"Title\">{`Tab content 1️⃣`}</Title>\n                <Title level={5} key=\"2\" mdxType=\"Title\">{`Tab content 2️⃣`}</Title>\n            </Tabs>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <p>{`Mandatory props to make everything work as it is supposed to are `}<inlineCode parentName=\"p\">{`activeKey`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`List`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`activeKey`}</strong>{`: accepts string or number and indicates which tab is active at the moment`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`onClick`}</strong>{`: accepts function and is called when user clicks on tab`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`List`}</strong>{`: accepts a function component that is used to render list of tabs`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`children`}</strong>{`: accepts children of `}<inlineCode parentName=\"li\">{`Tabs`}</inlineCode>{` component where each child is a tab content`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}